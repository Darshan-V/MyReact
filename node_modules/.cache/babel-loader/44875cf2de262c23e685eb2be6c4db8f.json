{"ast":null,"code":"import _objectSpread from \"/home/darshan/geekskool/React-Getting-Started-Projects/MyOwnReact/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nfunction createElement(type, props) {\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n  return {\n    type: type,\n    props: _objectSpread(_objectSpread({}, props), {}, {\n      children: children.map(function (child) {\n        return typeof child === \"object\" ? child : createTextElement(child);\n      })\n    })\n  };\n}\nfunction createTextElement(text) {\n  return {\n    type: \"TEXT_ELEMENT\",\n    props: {\n      nodeValue: text,\n      children: []\n    }\n  };\n}\nfunction createDom(fiber) {\n  var dom = fiber.type == \"TEXT_ELEMENT\" ? document.createTextNode(\"\") : document.createElement(fiber.type);\n  var isProperty = function isProperty(key) {\n    return key !== \"children\";\n  };\n  Object.keys(fiber.props).filter(isProperty).forEach(function (name) {\n    dom[name] = fiber.props[name];\n  });\n  return dom;\n}\nvar isEvent = function isEvent(key) {\n  return key.startsWith(\"on\");\n};\nvar isProperty = function isProperty(key) {\n  return key !== \"children\" && !isEvent(key);\n};\nvar isNew = function isNew(prev, next) {\n  return function (key) {\n    return prev[key] !== next[key];\n  };\n};\nvar isGone = function isGone(prev, next) {\n  return function (key) {\n    return !(key in next);\n  };\n};\nfunction updateDom(dom, prevProps, nextProps) {\n  //Remove old or changed event listeners\n\n  Object.keys(prevProps).filter(isEvent).filter(function (key) {\n    return !(key in nextProps || isNew(prevProps, nextProps)(key));\n  }).forEach(function (name) {\n    var eventType = name.toLowerCase().substring(2);\n    dom.removeEventListner(eventType, prevProps[name]);\n  });\n\n  //Remove old properties\n\n  Object.keys(prevProps).filter(isProperty).filter(isGone(prevProps, nextProps)).forEach(function (name) {\n    dom[name] = \"\";\n  });\n\n  //set new changed props\n\n  Object.keys(nextProps).filter(isProperty).filter(isNew(prevProps, nextProps)).forEach(function (name) {\n    dom[name] = nextProps[name];\n  });\n\n  //Adding event listeners\n  Object.keys(nextProps).filter(isEvent).filter(isNew(prevProps, nextProps)).forEach(function (name) {\n    var eventType = name.toLowerCase().substring(2);\n    dom.addEventListner(eventType, nextProps[name]);\n  });\n}\nfunction commitRoot() {\n  //recursively append all the node to the dom\n  deletions.forEach(commitWork);\n  commitWork(wipRoot.child);\n  currentRoot = wipRoot;\n  wipRoot = null;\n}\nfunction commitWork(fiber) {\n  if (!fiber) {\n    return;\n  }\n  var domParentFiber = fiber.parent;\n  while (!domParentFiber.dom) {\n    domParentFiber = domParentFiber.parent;\n  }\n  var domParent = domParentFiber.dom;\n  if (fiber.effectTag === \"PLACEMENT\" && fiber.dom != null) {\n    domParent.appendChild(fiber.dom);\n  } else if (fiber.effectTag === \"UPDATE\" && fiber.dom != null) {\n    updateDom(fiber.dom, fiber.alternate.props, fiber.props);\n  } else if (fiber.effectTag === \"DELETION\") {\n    commitDeletion(fiber.child, domParent);\n  }\n  commitWork(fiber.child);\n  commitWork(fiber.sibling);\n}\nfunction commitDeletion(fiber, domParent) {\n  if (fiber.dom) {\n    domParent.removeChild(fiber.dom);\n  } else {\n    commitDeletion(fiber.child, domParent);\n  }\n}\nfunction render(element, container) {\n  //work in progress root\n  wipRoot = {\n    dom: container,\n    props: {\n      children: [element]\n    },\n    alternate: currentRoot\n  };\n  deletions = [];\n  nextUnitOfWork = wipRoot;\n}\nvar nextUnitOfWork = null;\nvar wipRoot = null;\nvar currentRoot = null;\nvar deletions = null;\nfunction workLoop(deadline) {\n  var shouldYield = false;\n  while (nextUnitOfWork && !shouldYield) {\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n    shouldYield = deadline.timeRemaining() < 1;\n  }\n  if (!nextUnitOfWork && wipRoot) {\n    commitRoot(); //commit the fiber tree to the dom, only after building all the fiber tree\n  }\n\n  requestIdleCallback(workLoop);\n}\nrequestIdleCallback(workLoop);\n\n//performs a unit of work and also chooses whats the next to work on\n//fibers--> js objects\nfunction performUnitOfWork(fiber) {\n  //create new dom and append it to the dom\n  var isFunctionComponent = fiber.type instanceof Function;\n  if (isFunctionComponent) {\n    updateFunctionComponent(fiber);\n  } else {\n    updateHostComponent(fiber);\n  }\n  //search for the child with all the relation\n  if (fiber.child) {\n    return fiber.child;\n  }\n  var nextFiber = fiber;\n  while (nextFiber) {\n    if (nextFiber.sibling) {\n      return nextFiber.sibling;\n    }\n    nextFiber = nextFiber.parent;\n  }\n}\nvar wipFiber = null;\nvar hookIndex = null;\nfunction updateFunctionComponent(fiber) {\n  wipFiber = fiber;\n  hookIndex = 0;\n  var children = [fiber.type(fiber.props)];\n  reconcileChildren(fiber, children);\n}\nfunction useState(initial) {\n  var oldHook = wipFiber.alternate && wipFiber.alternate.hooks && wipFiber.alternate.hooks[hookIndex];\n  var hook = {\n    state: oldHook ? oldHook.state : initial,\n    queue: []\n  };\n  var actions = oldHook ? oldHook.queue : [];\n  actions.forEach(function (action) {\n    hook.state = action(hook.state);\n  });\n  var setState = function setState(action) {\n    hook.queue.push(action);\n    wipRoot = {\n      dom: currentRoot.dom,\n      props: currentRoot.props,\n      alternate: currentRoot\n    };\n    nextUnitOfWork = wipRoot;\n    deletions = [];\n  };\n  wipFiber.hooks.push(hook);\n  hookIndex++;\n  return [hook.state, setState];\n}\nfunction updateHostComponent(fiber) {\n  if (!fiber.dom) {\n    fiber.dom = createDom(fiber);\n  }\n  reconcileChildren(fiber, fiber.props.children);\n}\nfunction reconcileChildren(wipFiber, elements) {\n  var index = 0;\n  var oldFiber = wipFiber.alternate && wipFiber.alternate.child;\n  var prevSibling = null;\n  while (index < elements.length || oldFiber != null) {\n    var element = elements[index];\n    var newFiber = null;\n    var sameType = oldFiber && element && element.type == oldFiber.type;\n    if (sameType) {\n      newFiber = {\n        type: oldFiber.type,\n        props: element.props,\n        dom: oldFiber.dom,\n        parent: wipFiber,\n        alternate: oldFiber,\n        effectTag: \"UPDATE\"\n      };\n    }\n    if (element && !sameType) {\n      newFiber = {\n        type: element.type,\n        props: element.props,\n        dom: null,\n        parent: wipFiber,\n        alternate: null,\n        effectTag: \"PLACEMENT\"\n      };\n    }\n    if (oldFiber && !sameType) {\n      oldFiber.effectTag = \"DELETION\";\n      deletions.push(oldFiber);\n    }\n    if (oldFiber) {\n      oldFiber = oldFiber.sibling;\n    }\n    if (index === 0) {\n      wipFiber.child = newFiber;\n    } else if (element) {\n      prevSibling.sibling = newFiber;\n    }\n    prevSibling = newFiber;\n    index++;\n  }\n}\nexport var Maverick = {\n  createElement: createElement,\n  render: render,\n  useState: useState\n};","map":{"version":3,"names":["createElement","type","props","children","map","child","createTextElement","text","nodeValue","createDom","fiber","dom","document","createTextNode","isProperty","key","Object","keys","filter","forEach","name","isEvent","startsWith","isNew","prev","next","isGone","updateDom","prevProps","nextProps","eventType","toLowerCase","substring","removeEventListner","addEventListner","commitRoot","deletions","commitWork","wipRoot","currentRoot","domParentFiber","parent","domParent","effectTag","appendChild","alternate","commitDeletion","sibling","removeChild","render","element","container","nextUnitOfWork","workLoop","deadline","shouldYield","performUnitOfWork","timeRemaining","requestIdleCallback","isFunctionComponent","Function","updateFunctionComponent","updateHostComponent","nextFiber","wipFiber","hookIndex","reconcileChildren","useState","initial","oldHook","hooks","hook","state","queue","actions","action","setState","push","elements","index","oldFiber","prevSibling","length","newFiber","sameType","Maverick"],"sources":["/home/darshan/geekskool/React-Getting-Started-Projects/MyOwnReact/src/MyReact.js"],"sourcesContent":["function createElement(type, props, ...children) {\n  return {\n    type,\n    props: {\n      ...props,\n      children: children.map((child) =>\n        typeof child === \"object\" ? child : createTextElement(child)\n      ),\n    },\n  };\n}\n\nfunction createTextElement(text) {\n  return {\n    type: \"TEXT_ELEMENT\",\n    props: {\n      nodeValue: text,\n      children: [],\n    },\n  };\n}\n\nfunction createDom(fiber) {\n  const dom =\n    fiber.type == \"TEXT_ELEMENT\"\n      ? document.createTextNode(\"\")\n      : document.createElement(fiber.type);\n\n  const isProperty = (key) => key !== \"children\";\n  Object.keys(fiber.props)\n    .filter(isProperty)\n    .forEach((name) => {\n      dom[name] = fiber.props[name];\n    });\n\n  return dom;\n}\n\nconst isEvent = (key) => key.startsWith(\"on\");\nconst isProperty = (key) => key !== \"children\" && !isEvent(key);\nconst isNew = (prev, next) => (key) => prev[key] !== next[key];\nconst isGone = (prev, next) => (key) => !(key in next);\n\nfunction updateDom(dom, prevProps, nextProps) {\n  //Remove old or changed event listeners\n\n  Object.keys(prevProps)\n    .filter(isEvent)\n    .filter((key) => !(key in nextProps || isNew(prevProps, nextProps)(key)))\n    .forEach((name) => {\n      const eventType = name.toLowerCase().substring(2);\n      dom.removeEventListner(eventType, prevProps[name]);\n    });\n\n  //Remove old properties\n\n  Object.keys(prevProps)\n    .filter(isProperty)\n    .filter(isGone(prevProps, nextProps))\n    .forEach((name) => {\n      dom[name] = \"\";\n    });\n\n  //set new changed props\n\n  Object.keys(nextProps)\n    .filter(isProperty)\n    .filter(isNew(prevProps, nextProps))\n    .forEach((name) => {\n      dom[name] = nextProps[name];\n    });\n\n  //Adding event listeners\n  Object.keys(nextProps)\n    .filter(isEvent)\n    .filter(isNew(prevProps, nextProps))\n    .forEach((name) => {\n      const eventType = name.toLowerCase().substring(2);\n      dom.addEventListner(eventType, nextProps[name]);\n    });\n}\n\nfunction commitRoot() {\n  //recursively append all the node to the dom\n  deletions.forEach(commitWork);\n  commitWork(wipRoot.child);\n  currentRoot = wipRoot;\n  wipRoot = null;\n}\nfunction commitWork(fiber) {\n  if (!fiber) {\n    return;\n  }\n\n  let domParentFiber = fiber.parent;\n  while (!domParentFiber.dom) {\n    domParentFiber = domParentFiber.parent;\n  }\n  const domParent = domParentFiber.dom;\n\n  if (fiber.effectTag === \"PLACEMENT\" && fiber.dom != null) {\n    domParent.appendChild(fiber.dom);\n  } else if (fiber.effectTag === \"UPDATE\" && fiber.dom != null) {\n    updateDom(fiber.dom, fiber.alternate.props, fiber.props);\n  } else if (fiber.effectTag === \"DELETION\") {\n    commitDeletion(fiber.child, domParent);\n  }\n\n  commitWork(fiber.child);\n  commitWork(fiber.sibling);\n}\n\nfunction commitDeletion(fiber, domParent) {\n  if (fiber.dom) {\n    domParent.removeChild(fiber.dom);\n  } else {\n    commitDeletion(fiber.child, domParent);\n  }\n}\n\nfunction render(element, container) {\n  //work in progress root\n  wipRoot = {\n    dom: container,\n    props: {\n      children: [element],\n    },\n    alternate: currentRoot,\n  };\n  deletions = [];\n  nextUnitOfWork = wipRoot;\n}\n\nlet nextUnitOfWork = null;\nlet wipRoot = null;\nlet currentRoot = null;\nlet deletions = null;\n\nfunction workLoop(deadline) {\n  let shouldYield = false;\n  while (nextUnitOfWork && !shouldYield) {\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n    shouldYield = deadline.timeRemaining() < 1;\n  }\n  if (!nextUnitOfWork && wipRoot) {\n    commitRoot(); //commit the fiber tree to the dom, only after building all the fiber tree\n  }\n  requestIdleCallback(workLoop);\n}\nrequestIdleCallback(workLoop);\n\n//performs a unit of work and also chooses whats the next to work on\n//fibers--> js objects\nfunction performUnitOfWork(fiber) {\n  //create new dom and append it to the dom\n  const isFunctionComponent = fiber.type instanceof Function;\n  if (isFunctionComponent) {\n    updateFunctionComponent(fiber);\n  } else {\n    updateHostComponent(fiber);\n  }\n  //search for the child with all the relation\n  if (fiber.child) {\n    return fiber.child;\n  }\n  let nextFiber = fiber;\n  while (nextFiber) {\n    if (nextFiber.sibling) {\n      return nextFiber.sibling;\n    }\n    nextFiber = nextFiber.parent;\n  }\n}\n\nlet wipFiber = null;\nlet hookIndex = null;\n\nfunction updateFunctionComponent(fiber) {\n  wipFiber = fiber;\n  hookIndex = 0;\n  const children = [fiber.type(fiber.props)];\n  reconcileChildren(fiber, children);\n}\n\nfunction useState(initial) {\n  const oldHook =\n    wipFiber.alternate &&\n    wipFiber.alternate.hooks &&\n    wipFiber.alternate.hooks[hookIndex];\n  const hook = {\n    state: oldHook ? oldHook.state : initial,\n    queue: [],\n  };\n\n  const actions = oldHook ? oldHook.queue : [];\n  actions.forEach((action) => {\n    hook.state = action(hook.state);\n  });\n\n  const setState = (action) => {\n    hook.queue.push(action);\n    wipRoot = {\n      dom: currentRoot.dom,\n      props: currentRoot.props,\n      alternate: currentRoot,\n    };\n    nextUnitOfWork = wipRoot;\n    deletions = [];\n  };\n  wipFiber.hooks.push(hook);\n  hookIndex++;\n  return [hook.state, setState];\n}\n\nfunction updateHostComponent(fiber) {\n  if (!fiber.dom) {\n    fiber.dom = createDom(fiber);\n  }\n  reconcileChildren(fiber, fiber.props.children);\n}\n\nfunction reconcileChildren(wipFiber, elements) {\n  let index = 0;\n  let oldFiber = wipFiber.alternate && wipFiber.alternate.child;\n  let prevSibling = null;\n\n  while (index < elements.length || oldFiber != null) {\n    const element = elements[index];\n    let newFiber = null;\n\n    const sameType = oldFiber && element && element.type == oldFiber.type;\n\n    if (sameType) {\n      newFiber = {\n        type: oldFiber.type,\n        props: element.props,\n        dom: oldFiber.dom,\n        parent: wipFiber,\n        alternate: oldFiber,\n        effectTag: \"UPDATE\",\n      };\n    }\n    if (element && !sameType) {\n      newFiber = {\n        type: element.type,\n        props: element.props,\n        dom: null,\n        parent: wipFiber,\n        alternate: null,\n        effectTag: \"PLACEMENT\",\n      };\n    }\n    if (oldFiber && !sameType) {\n      oldFiber.effectTag = \"DELETION\";\n      deletions.push(oldFiber);\n    }\n\n    if (oldFiber) {\n      oldFiber = oldFiber.sibling;\n    }\n\n    if (index === 0) {\n      wipFiber.child = newFiber;\n    } else if (element) {\n      prevSibling.sibling = newFiber;\n    }\n\n    prevSibling = newFiber;\n    index++;\n  }\n}\n\nexport const Maverick = {\n  createElement,\n  render,\n  useState,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}